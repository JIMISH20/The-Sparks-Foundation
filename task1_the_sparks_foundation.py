# -*- coding: utf-8 -*-
"""Task1 The Sparks Foundation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kleYAMs0bMFelSkzJ17FBSz0vRUwD08x

# **Task 1 :- Prediction using Supervised ML**

**Implemented By :- KHOLAPURE JIMISH PRAMOD**

*Aim :- To Predict the scores of students given the number of Hours studied using Simple Linear Regression*

**Importing the required Libraries**
"""

#Import all the necessary libraries.

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore")
pd.set_option("display.max_columns",None)
import seaborn as sns
import matplotlib as plt
import matplotlib.pyplot as plt

"""**Loading the Dataset**"""

#Loading the dataset from the specified url

df=pd.read_csv("https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv")
print("Dataset imported Successfully")
df.head()

"""**Briefing the DataSet**"""

#The describe() function is used to generate descriptive statistics.
df.describe()

#The info() function is used to get a concise summary of the dataframe. It comes really handy when doing exploratory analysis of the data
df.info()

"""**Box Ploting the values to Find any presence of outliers in the data**"""

df.boxplot(column="Hours")
df.boxplot(column="Scores")

"""**From the above boxplot we can say that there is no presence of outliers in the dataset.**"""



"""**Linear Relationship between the two variables**"""

sns.pairplot(df,x_vars="Hours",y_vars="Scores",kind="reg")

"""**Plotting the Score Distribution**"""

#Data Visualization
df.plot(x='Hours',y='Scores',style='d',)
plt.grid()
plt.title('Marks Vs Study Hours')
plt.xlabel('Study Hours')
plt.ylabel('Percentage Scored')
plt.show()

"""**Splitting the Dataset into Training and Test Dataset.**"""

X = df[["Hours"]]
Y = df[["Scores"]]
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test =  train_test_split(X,Y, test_size=0.2,random_state=10)

"""**Implementing Linear Regression**"""

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X_train,Y_train)

print(lm.coef_)
print(lm.intercept_)

"""**Prediction**"""

Y_pred = lm.predict(X_test)
Y_pred

#Prediction of Score for Student Studing 9.25 hours

pred = lm.predict([[9.25]])
pred

print("Number of Hours Studied : 9.25")
print("The Predicted Score : ",pred)
#The Score of Student for 9.25 hours is 93.43%

"""**The Final Predicted Score is : *93.43%* for Student Studing 9.25 Hours**

"""

Y_test

"""**Creating new Dataframe for Actual and Predicted Values**"""

dataframe = pd.DataFrame()
dataframe = X_test

dataframe['Actual'] = Y_test
dataframe['Predicted'] = Y_pred
dataframe

"""**Evaluating the Model**"""

from sklearn.metrics import mean_absolute_error,r2_score
Mean = mean_absolute_error(Y_test,Y_pred)
r2 = r2_score(Y_test , Y_pred)

print("Mean Absolute Error :",Mean)
print("R2_Score",r2)

"""# **Synopsis**

The Dataset was loaded into the dataframe.

Exploratory data analysis was performed.

Data was splitted into training and testing dataset.

Further the model was trained using Linear Regression.

Finally the values were predicted.

The model was Evaluated on metrics such as Mean Absolute Error and R2 Score.
"""